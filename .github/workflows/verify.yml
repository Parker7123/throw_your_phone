on: push
name: Test, Build and Release apk
jobs:
  build:
    name: Build APK
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-java@v1
        with:
          java-version: '17.x'
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version: 3.27.3
      # Run steps with continue-on-error and capture output
      - name: Run dart format
        id: dart_format
        continue-on-error: true
        run: |
          echo "Running dart format..."
          dart format --set-exit-if-changed . > dart_format_output.txt 2>&1 || echo "dart_format_status=failed" >> $GITHUB_ENV

      - name: Run flutter pub get
        id: flutter_pub_get
        continue-on-error: true
        run: |
          echo "Running flutter pub get..."
          flutter pub get > flutter_pub_get_output.txt 2>&1 || echo "flutter_pub_get_status=failed" >> $GITHUB_ENV

      - name: Run flutter analyze
        id: flutter_analyze
        continue-on-error: true
        run: |
          echo "Running flutter analyze..."
          flutter analyze > flutter_analyze_output.txt 2>&1 || echo "flutter_analyze_status=failed" >> $GITHUB_ENV

      - name: Run flutter test
        id: flutter_test
        continue-on-error: true
        run: |
          echo "Running flutter test..."
          flutter test > flutter_test_output.txt 2>&1 || echo "flutter_test_status=failed" >> $GITHUB_ENV

      - name: Run flutter build apk
        id: flutter_build_apk
        continue-on-error: true
        run: |
          echo "Running flutter build apk..."
          flutter build apk --debug --split-per-abi > flutter_build_apk_output.txt 2>&1 || echo "flutter_build_apk_status=failed" >> $GITHUB_ENV

      # Check for failures and print outputs
      - name: Check for failures
        id: check_failures
        run: |
          echo "Checking for failures..."
          FAILED_STEPS=""
          if [[ "${{ env.dart_format_status }}" == "failed" ]]; then
            FAILED_STEPS+="dart format\n"
            echo "::error::dart format failed"
            echo "dart format output:"
            cat dart_format_output.txt
          fi
          if [[ "${{ env.flutter_pub_get_status }}" == "failed" ]]; then
            FAILED_STEPS+="flutter pub get\n"
            echo "::error::flutter pub get failed"
            echo "flutter pub get output:"
            cat flutter_pub_get_output.txt
          fi
          if [[ "${{ env.flutter_analyze_status }}" == "failed" ]]; then
            FAILED_STEPS+="flutter analyze\n"
            echo "::error::flutter analyze failed"
            echo "flutter analyze output:"
            cat flutter_analyze_output.txt
          fi
          if [[ "${{ env.flutter_test_status }}" == "failed" ]]; then
            FAILED_STEPS+="flutter test\n"
            echo "::error::flutter test failed"
            echo "flutter test output:"
            cat flutter_test_output.txt
          fi
          if [[ "${{ env.flutter_build_apk_status }}" == "failed" ]]; then
            FAILED_STEPS+="flutter build apk\n"
            echo "::error::flutter build apk failed"
            echo "flutter build apk output:"
            cat flutter_build_apk_output.txt
          fi

          if [[ -n "$FAILED_STEPS" ]]; then
            echo "The following steps failed:"
            echo -e "$FAILED_STEPS"
            echo "has_failures=true" >> $GITHUB_ENV
          else
            echo "All steps succeeded."
            echo "has_failures=false" >> $GITHUB_ENV
          fi

      # Fail the workflow if any step failed
      - name: Fail workflow if any step failed
        if: ${{ env.has_failures == 'true' }}
        run: |
          echo "One or more steps failed. Failing the workflow."
          exit 1

      # Push APK to Releases (only if no failures)
      - name: Push APK to Releases
        if: ${{ env.has_failures == 'false' }}
        uses: ncipollo/release-action@v1
        with:
          artifacts: "build/app/outputs/apk/debug/*.apk"
          token: ${{ secrets.TOKEN }}
